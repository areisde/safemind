name: Deploy MLOps Platform
on: 
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AZURE_RESOURCE_GROUP: mlops-dev-rg
  AKS_CLUSTER_NAME: aks-mlops-dev
  IMAGE_GUARDRAIL: ghcr.io/${{ github.repository_owner }}/guardrail:${{ github.sha }}
  IMAGE_PROXY: ghcr.io/${{ github.repository_owner }}/llm-proxy:${{ github.sha }}

jobs:
  infrastructure:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      azure_openai_endpoint: ${{ steps.terraform-outputs.outputs.azure_openai_endpoint }}
      azure_openai_api_key: ${{ steps.terraform-outputs.outputs.azure_openai_api_key }}
      gpt4o_deployment_name: ${{ steps.terraform-outputs.outputs.gpt4o_deployment_name }}
      frontdoor_endpoint_hostname: ${{ steps.terraform-outputs.outputs.frontdoor_endpoint_hostname }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0
      
      - name: Set Terraform Azure Provider Environment Variables
        run: |
          # Extract values from AZURE_CREDENTIALS secret
          CLIENT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientId')
          CLIENT_SECRET=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientSecret')
          TENANT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.tenantId')
          SUBSCRIPTION_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.subscriptionId')
          
          # Set environment variables for Terraform Azure Provider
          echo "ARM_CLIENT_ID=$CLIENT_ID" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=$CLIENT_SECRET" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$TENANT_ID" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=$SUBSCRIPTION_ID" >> $GITHUB_ENV
          echo "ARM_USE_CLI=false" >> $GITHUB_ENV
      
      - name: Terraform Init
        working-directory: infra/envs/azure/dev
        run: terraform init
      
      - name: Terraform Plan
        working-directory: infra/envs/azure/dev
        run: terraform plan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        working-directory: infra/envs/azure/dev
        run: |
          # Apply infrastructure changes
          terraform apply -auto-approve

      - name: Get Terraform outputs
        id: terraform-outputs
        working-directory: infra/envs/azure/dev
        run: |
          echo "azure_openai_endpoint=$(terraform output -raw azure_openai_endpoint)" >> $GITHUB_OUTPUT
          echo "azure_openai_api_key=$(terraform output -raw azure_openai_api_key)" >> $GITHUB_OUTPUT
          echo "gpt4o_deployment_name=$(terraform output -raw gpt4o_deployment_name)" >> $GITHUB_OUTPUT
          echo "frontdoor_endpoint_hostname=$(terraform output -raw frontdoor_endpoint_hostname)" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build & push Guardrail
        run: |
          docker build -t $IMAGE_GUARDRAIL services/guardrail
          docker push $IMAGE_GUARDRAIL

      - name: Build & push LLM-proxy
        run: |
          docker build -t $IMAGE_PROXY services/llm-proxy
          docker push $IMAGE_PROXY

  deploy:
    needs: [infrastructure, build]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup kubectl with Azure AD
        run: |
          # Use admin credentials for simplicity - bypasses RBAC complexity
          # The service principal has Azure Kubernetes Service Cluster Admin Role
          echo "Getting admin credentials for AKS cluster..."
          az aks get-credentials \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.AKS_CLUSTER_NAME }} \
            --admin \
            --overwrite-existing
          
          # Test cluster access
          kubectl auth can-i get nodes && echo "‚úÖ Cluster access confirmed" || echo "‚ùå Cluster access failed"

      - name: Setup Helm
        uses: azure/setup-helm@v3

      - name: Add Helm repositories
        run: |
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add kong https://charts.konghq.com
          helm repo update

      - name: Cleanup Existing Deployments
        run: |
          echo "üßπ Simple cleanup of potential conflicts..."
          
          # Simple cleanup - just delete namespaces if they exist (everything gets recreated)
          echo "Deleting llm namespace if it exists..."
          kubectl delete namespace llm --ignore-not-found=true --timeout=120s || echo "LLM namespace cleanup completed"
          
          echo "Deleting observability namespace if it exists..."
          kubectl delete namespace observability --ignore-not-found=true --timeout=120s || echo "Observability namespace cleanup completed"
          
          # Wait a moment for cleanup to complete
          echo "‚è≥ Waiting for cleanup to complete (30s)..."
          sleep 30
          
          echo "‚úÖ Cleanup completed successfully"

      - name: Deploy Kong Gateway
        run: |
          # Create namespace for LLM services (Kong will be installed here)
          kubectl create namespace llm --dry-run=client -o yaml | kubectl apply -f -
          
          # Create GitHub Container Registry pull secret
          kubectl create secret docker-registry ghcr-pull \
            --namespace llm \
            --docker-server=ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }} \
            --docker-email=${{ github.actor }}@users.noreply.github.com \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Install Kong as ingress controller with force upgrade
          echo "üîç Installing Kong Gateway..."
          helm upgrade --install kong kong/kong \
            --namespace llm \
            --set ingressController.enabled=true \
            --set admin.enabled=true \
            --set admin.http.enabled=true \
            --set proxy.type=LoadBalancer \
            --wait \
            --timeout 8m \
            --force \
             || {
              echo "‚ùå Kong deployment failed"
              kubectl get pods -n llm
              exit 1
            }
          
          echo "‚úÖ Kong Gateway deployed successfully"

      - name: Deploy Observability Stack
        run: |
          # Create namespace
          kubectl create namespace observability --dry-run=client -o yaml | kubectl apply -f -
          
          # Check cluster resources before deploying observability
          echo "üìä Pre-deployment cluster status:"
          kubectl get nodes -o wide
          kubectl describe nodes | grep -A 10 "Allocated resources"
          kubectl get pods --all-namespaces | wc -l
          echo "Current pod count: $(kubectl get pods --all-namespaces --no-headers | wc -l)"
          
          # Deploy Loki for logging (with debugging and fallback)
          echo "üîç Deploying Loki with debugging..."
          echo "Loki configuration:"
          cat observability/parameters/loki.yaml
          
          # Try to deploy Loki with shorter timeout and debugging
          helm upgrade --install loki grafana/loki \
            --namespace observability \
            --create-namespace \
            -f observability/parameters/loki.yaml \
            --timeout 3m \
            --debug \
             || {
              echo "‚ö†Ô∏è Loki deployment failed, checking status..."
              kubectl get pods -n observability
              kubectl describe pods -n observability | head -100
              echo "Continuing without waiting for Loki..."
            }
          
          # Deploy Promtail RBAC and DaemonSet for log collection
          echo "üîç Deploying Promtail for log collection..."
          kubectl apply -f observability/promtail-rbac.yaml || echo "‚ö†Ô∏è Promtail RBAC apply failed"
          kubectl apply -f observability/parameters/promtail.yaml || echo "‚ö†Ô∏è Promtail DaemonSet apply failed"
          
          # Deploy Prometheus for metrics (with debugging)
          echo "üîç Deploying Prometheus..."
          helm upgrade --install prometheus prometheus-community/prometheus \
            --namespace observability \
            --create-namespace \
            --timeout 3m \
            --debug \
             || {
              echo "‚ö†Ô∏è Prometheus deployment failed, checking status..."
              kubectl get pods -n observability
              echo "Continuing without waiting for Prometheus..."
            }
          
          # Deploy Grafana for dashboards (with debugging)
          echo "üîç Deploying Grafana..."
          helm upgrade --install grafana grafana/grafana \
            --namespace observability \
            --create-namespace \
            --set adminPassword=${{ secrets.GRAFANA_ADMIN_PASSWORD }} \
            --set sidecar.dashboards.enabled=true \
            --set sidecar.dashboards.label=grafana_dashboard \
            --set sidecar.datasources.enabled=true \
            --set sidecar.datasources.label=grafana_datasource \
            --timeout 3m \
            --debug \
             || {
              echo "‚ö†Ô∏è Grafana deployment failed, checking status..."
              kubectl get pods -n observability
              echo "Continuing without waiting for Grafana..."
            }
          
          # Apply custom dashboards and configs (best effort)
          echo "üîç Applying custom dashboards and configurations..."
          kubectl apply -f observability/grafana-llm-analytics-dashboard.yaml || echo "‚ö†Ô∏è LLM analytics dashboard apply failed"
          kubectl apply -f observability/grafana-mlops-dashboard.yaml || echo "‚ö†Ô∏è MLOps dashboard apply failed"
          kubectl apply -f observability/loki-datasource.yaml || echo "‚ö†Ô∏è Loki datasource apply failed"

      - name: Deploy MLOps Services
        run: |
          # Ensure namespace exists and is clean
          kubectl create namespace llm --dry-run=client -o yaml | kubectl apply -f -
          
          # Recreate GHCR pull secret in case it was cleaned up
          kubectl create secret docker-registry ghcr-pull \
            --namespace llm \
            --docker-server=ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }} \
            --docker-email=${{ github.actor }}@users.noreply.github.com \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Deploy Guardrail service with conflict handling
          echo "üîç Deploying Guardrail service..."
          helm upgrade --install guardrail charts/guardrail \
               --namespace llm \
               --set image.repository=ghcr.io/${{ github.repository_owner }}/guardrail \
               --set image.tag=${{ github.sha }} \
               --set image.pullSecrets[0].name=ghcr-pull \
               --timeout 5m \
               --force \
                || {
            echo "‚ö†Ô∏è Guardrail deployment failed, checking status..."
            kubectl get pods -n llm
            kubectl describe pods -n llm | grep -A 10 "guardrail" || echo "No guardrail pods found"
          }
          
          # Deploy LLM Proxy service with conflict handling
          echo "üîç Deploying LLM Proxy service..."
          helm upgrade --install llm-proxy charts/llm-proxy \
               --namespace llm \
               --set image.repository=ghcr.io/${{ github.repository_owner }}/llm-proxy \
               --set image.tag=${{ github.sha }} \
               --set image.pullSecrets[0].name=ghcr-pull \
               --set env.AZURE_OPENAI_ENDPOINT="${{ needs.infrastructure.outputs.azure_openai_endpoint }}" \
               --set env.AZURE_OPENAI_API_KEY="${{ needs.infrastructure.outputs.azure_openai_api_key }}" \
               --set env.AZURE_OPENAI_DEPLOYMENT_NAME="${{ needs.infrastructure.outputs.gpt4o_deployment_name }}" \
               --set env.AZURE_OPENAI_API_VERSION="2024-08-01-preview" \
               --timeout 5m \
               --force \
                || {
            echo "‚ö†Ô∏è LLM Proxy deployment failed, checking status..."
            kubectl get pods -n llm
            kubectl describe pods -n llm | grep -A 10 "llm-proxy" || echo "No llm-proxy pods found"
          }
          
          # Show current pod status for debugging
          echo "üìä Current pod status in llm namespace:"
          kubectl get pods -n llm -o wide
          
          # Wait for critical services with shorter timeout (best effort)
          echo "‚è≥ Waiting for critical services (best effort)..."
          kubectl wait --for=condition=available deployment/guardrail -n llm --timeout=180s || echo "‚ö†Ô∏è Guardrail still starting..."
          kubectl wait --for=condition=available deployment/llm-proxy -n llm --timeout=180s || echo "‚ö†Ô∏è LLM Proxy still starting..."

      - name: Deploy Gateway and Security
        run: |
          # Deploy Kong gateway configuration (ingress) using Helm
          echo "üîç Deploying Kong gateway configurations..."
          if helm upgrade --install gateway charts/gateway/ \
              --namespace llm \
              --set ingress.host="${{ needs.infrastructure.outputs.frontdoor_endpoint_hostname }}" \
              --set ingress.tls.secretName="llm-tls"; then
            echo "‚úÖ Gateway deployed successfully"
          else
            echo "‚ö†Ô∏è Gateway deployment failed, trying fallback..."
            # Fallback: try without Front Door hostname (use default from values)
            helm upgrade --install gateway charts/gateway/ \
              --namespace llm \
              --set ingress.tls.secretName="llm-tls" || echo "‚ùå Gateway deployment failed completely"
          fi
          
          # Apply Kong observability configurations (now that Kong CRDs are available) - best effort
          echo "üîç Applying Kong observability configurations..."
          kubectl apply -f observability/kong-metrics.yaml || echo "‚ö†Ô∏è Kong metrics config failed"
          kubectl apply -f observability/kong-servicemonitor.yaml || echo "‚ö†Ô∏è Kong service monitor failed"
          
          # Apply security policies with detailed feedback
          echo "üîç Applying security policies..."
          
          # Apply each security file individually for better error tracking
          for security_file in security/*.yaml; do
            if [[ -f "$security_file" ]]; then
              echo "üìã Applying $security_file..."
              if kubectl apply -f "$security_file"; then
                echo "‚úÖ Successfully applied $security_file"
              else
                echo "‚ùå Failed to apply $security_file"
              fi
            fi
          done
          
          # Verify security policies are active
          echo "üîí Verifying security policies are active..."
          kubectl get networkpolicies -A || echo "No network policies found"
          kubectl get kongplugins -A || echo "No Kong plugins found"

      - name: Verify Deployment
        run: |
          # Show final deployment status
          echo "üîç Checking final deployment status..."
          kubectl get deployments -n llm -o wide
          kubectl get deployments -n observability -o wide
          
          # Show node resource usage to verify we have capacity
          echo "üìä Node resource usage:"
          kubectl describe nodes | grep -A 10 "Allocated resources"
          
          # Show all pods status after fresh deployment
          echo "üöÄ All pods status after fresh deployment:"
          kubectl get pods --all-namespaces -o wide
          
          # Verify services are healthy
          echo "üè• Service health checks:"
          kubectl get pods -n llm -l app.kubernetes.io/name=guardrail
          kubectl get pods -n llm -l app.kubernetes.io/name=llm-proxy
          kubectl get pods -n llm -l app.kubernetes.io/name=kong
          
          # Get service endpoints
          echo "üåê Service endpoints:"
          kubectl get services -A
          kubectl get ingress -A
          
          # Show logs for any failing pods
          echo "üìã Checking for any failing pods..."
          kubectl get pods --all-namespaces --field-selector=status.phase!=Running,status.phase!=Succeeded
